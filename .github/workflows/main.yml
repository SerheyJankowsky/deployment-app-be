name: Build and Push Docker Image

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/deployer:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: SerheyJankowsky/ssh-action@v3
        with:
          ssh_host: ${{ secrets.SSH_HOST }}
          ssh_user: ${{ secrets.SSH_USER }}
          # ssh-port: ${{ secrets.SSH_PORT }}
          ssh_password: ${{ secrets.SSH_PASSWORD }}
          script: |
            echo "Deploying to server...."
            echo "Logging in to Docker Hub..."
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            echo "Pulling latest image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/deployer:latest
            echo "Stopping existing container..."
            docker stop deployer || true
            echo "Removing existing container..."
            docker rm deployer || true
            echo "Running container..."
            docker run -d --name deployer --env-file .env --network gateway_network --ip 172.30.0.20 ${{ secrets.DOCKER_USERNAME }}/deployer:latest
            echo "check container status..."
            docker ps -a
            if [ "$(docker inspect -f '{{.State.Status}}' deployer)" = "exited" ]; then
              echo "Container exited unexpectedly"
              exit 1
            fi

  run-open-sh-container:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Copy opensh-container files to server
        run: |
          echo "Copying opensh-container directory to server..."
          sshpass -p "${{ secrets.HOST_PASSWORD }}" scp -o StrictHostKeyChecking=no -r ./opensh-container ${{ secrets.HOST_USERNAME }}@${{ secrets.HOST }}:~/

      - name: Deploy containers on server
        run: |
          echo "Starting container deployment on ${{ secrets.HOST }}..."
          sshpass -p "${{ secrets.HOST_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.HOST_USERNAME }}@${{ secrets.HOST }} "
            cd ~/opensh-container &&
            chmod +x *.sh &&
            ./manage-containers.sh auto
          "
